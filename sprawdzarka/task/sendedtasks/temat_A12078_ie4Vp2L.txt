<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://mhanckow.vm.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="A">
<imie_nazwisko>Andrzej Fudro</imie_nazwisko>
<nr_indeksu>416065</nr_indeksu>
<liczba_pkt>5</liczba_pkt>
<zadanie nr="-1" pkt="1"></zadanie>
<zadanie nr="0" pkt="1"></zadanie>
<zadanie nr="1" pkt="1"></zadanie>
<zadanie nr="1a" pkt="1"></zadanie>
<zadanie nr="8" pkt="1"></zadanie>
</sprawozdanie>

Zadanie -1 -------------------------------------
Polecenie fiber pozwala wykonywać operacje na wierzchołkach (fiberach) takie jak ich tworzenie, wyświetlenie stanu, restart i usuwanie.
/// wydruk
0: aaaaaaaaa
1: aaaaaaaaa
2: aaaaaaaaa
0: bbbbbbbbb
1: bbbbbbbbb
2: bbbbbbbbb

Zadanie 0 -------------------------------------
source symul_lib.tcl; # ladowanie symulatora
  #% 
 
# tworzymy graf komunikacyjny (w tym wypadku cykl)
set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}
  #% 3 0
 
# główny program na każdym wierzchołku/fiberze...
fiber create $liczbaWierz {
 
  if {$id==0} {wyslij 1 0}
  fiber yield; # oznacza koniec rundy
 
  while {$run} { # zmienna run pozwala zakonczyć działanie symulacji
    if {$kom(0)!=""} {
      set x $kom(0)
      incr x
      wyslij 1 $x
    }
    fiber yield; # oznacza koniec rundy
  }
}
 
Inicjalizacja; # koniecznie trzeba to wywołać !!!
 
proc wizualizacja {} {
  fiber_iterate {_puts "$id: $kom0, $kom1"}
    # petla fiber_iterate iteruje po wszystkich fiberach
    # proc wizualizacja wywolujemy z konsoli po kazdej rundzie
}
  #% 
 
# !!! do tego miejsca wszystko wykonać !!!!!!!!!!!!!!!!!!!!!

fiber yield; runda; wizualizacja
  # wykonuje kolejna runde...
  # procedura runda dostarcza wysłane komunikaty
  #% 
  #% 
  #% 
/// wydruk
0: , 
1: 0, 
2: , 
3: , 
4: , 
0: , 
1: , 
2: 1, 
3: , 
4: , 
0: , 
1: , 
2: , 
3: 2, 
4: , 

Zadanie 1 -------------------------------------
load ./q3.dll

source symul_lib.tcl;

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}

fiber create $liczbaWierz {
	set lider ?;
	wyslij 0 $id;
	fiber yield;
	while {$run} {
		if {$kom(1)!=""} {
			set x $kom(1);
			if {$x>$id} {
				set lider 0;
				wyslij 0 $x;
			} elseif {$x==$id} {
				set lider 1;
				wyslij 0 $x;
			} elseif {$x < $id} {
				
			}
		}
		fiber yield;
	}
}

Inicjalizacja;

proc wizualizacja {} {
	_puts ---
	fiber_iterate {_puts "ID: $id, LIDER: $lider, KOM1: $kom(1)"}
}
 
fiber yield; runda; wizualizacja
/// wydruk
---
ID: 0, LIDER: ?, KOM1: 1
ID: 1, LIDER: ?, KOM1: 2
ID: 2, LIDER: ?, KOM1: 3
ID: 3, LIDER: ?, KOM1: 4
ID: 4, LIDER: ?, KOM1: 0
---
ID: 0, LIDER: 0, KOM1: 2
ID: 1, LIDER: 0, KOM1: 3
ID: 2, LIDER: 0, KOM1: 4
ID: 3, LIDER: 0, KOM1: 
ID: 4, LIDER: ?, KOM1: 1
---
ID: 0, LIDER: 0, KOM1: 3
ID: 1, LIDER: 0, KOM1: 4
ID: 2, LIDER: 0, KOM1: 
ID: 3, LIDER: 0, KOM1: 
ID: 4, LIDER: ?, KOM1: 2
---
ID: 0, LIDER: 0, KOM1: 4
ID: 1, LIDER: 0, KOM1: 
ID: 2, LIDER: 0, KOM1: 
ID: 3, LIDER: 0, KOM1: 
ID: 4, LIDER: ?, KOM1: 3
---
ID: 0, LIDER: 0, KOM1: 
ID: 1, LIDER: 0, KOM1: 
ID: 2, LIDER: 0, KOM1: 
ID: 3, LIDER: 0, KOM1: 
ID: 4, LIDER: ?, KOM1: 4
---
ID: 0, LIDER: 0, KOM1: 
ID: 1, LIDER: 0, KOM1: 
ID: 2, LIDER: 0, KOM1: 
ID: 3, LIDER: 0, KOM1: 4
ID: 4, LIDER: 1, KOM1: 

Zadanie 1a -------------------------------------
load ./q3.dll

source symul_lib.tcl;

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}

fiber create $liczbaWierz {
	set lider ?;
	wyslij 0 $id;
	wyslij 1 $id;
	fiber yield;
	while {$run} {
		if {$kom(1)!=""} {
			set x $kom(1);
			if {$x>$id} {
				set lider 0;
				wyslij 0 $x;
			} elseif {$x==$id} {
				set lider 1;
				wyslij 0 $x;
			} elseif {$x < $id} {
				
			}
		}
		if {$kom(0)!=""} {
		set x $kom(0);
			if {$x>$id} {
				set lider 0;
				wyslij 1 $x;
			} elseif {$x==$id} {
				set lider 1;
				wyslij 1 $x;
			} elseif {$x < $id} {
				
			}
		}
		fiber yield;
	}
}

Inicjalizacja;

proc wizualizacja {} {
	_puts ---
	fiber_iterate {_puts "ID: $id, LIDER: $lider, KOM0: $kom(0), KOM1: $kom(1)"}
}
 
fiber yield; runda; wizualizacja
/// wydruk
---
ID: 0, LIDER: ?, KOM0: 4, KOM1: 1
ID: 1, LIDER: ?, KOM0: 0, KOM1: 2
ID: 2, LIDER: ?, KOM0: 1, KOM1: 3
ID: 3, LIDER: ?, KOM0: 2, KOM1: 4
ID: 4, LIDER: ?, KOM0: 3, KOM1: 0
---
ID: 0, LIDER: 0, KOM0: , KOM1: 2
ID: 1, LIDER: 0, KOM0: 4, KOM1: 3
ID: 2, LIDER: 0, KOM0: , KOM1: 4
ID: 3, LIDER: 0, KOM0: , KOM1: 
ID: 4, LIDER: ?, KOM0: , KOM1: 1
---
ID: 0, LIDER: 0, KOM0: , KOM1: 3
ID: 1, LIDER: 0, KOM0: , KOM1: 4
ID: 2, LIDER: 0, KOM0: 4, KOM1: 
ID: 3, LIDER: 0, KOM0: , KOM1: 
ID: 4, LIDER: ?, KOM0: , KOM1: 2
---
ID: 0, LIDER: 0, KOM0: , KOM1: 4
ID: 1, LIDER: 0, KOM0: , KOM1: 
ID: 2, LIDER: 0, KOM0: , KOM1: 
ID: 3, LIDER: 0, KOM0: 4, KOM1: 
ID: 4, LIDER: ?, KOM0: , KOM1: 3
---
ID: 0, LIDER: 0, KOM0: , KOM1: 
ID: 1, LIDER: 0, KOM0: , KOM1: 
ID: 2, LIDER: 0, KOM0: , KOM1: 
ID: 3, LIDER: 0, KOM0: , KOM1: 
ID: 4, LIDER: ?, KOM0: 4, KOM1: 4
---
ID: 0, LIDER: 0, KOM0: 4, KOM1: 
ID: 1, LIDER: 0, KOM0: , KOM1: 
ID: 2, LIDER: 0, KOM0: , KOM1: 
ID: 3, LIDER: 0, KOM0: , KOM1: 4
ID: 4, LIDER: 1, KOM0: , KOM1: 

Zadanie 8.1 -------------------------------------
#alg 1: wysyłający O(n) komunikatów,
source symul_lib.tcl

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}
 
fiber create $liczbaWierz {
	set sum $id_los
	wyslij 0 $id_los
	wyslij 1 $id_los
	set i 0
	fiber yield; # oznacza koniec rundy
	while {$i < $liczbaWierz/2} { 
		set x $kom(0)
		set y $kom(1)
		let sum $sum+$x+$y
		wyslij 0 $y
		wyslij 1 $x
		incr i
		fiber yield;
  }
}
 
Inicjalizacja; 
 
proc wizualizacja {} {
	_puts ---
    fiber_iterate {_puts "ID: $id, ID_LOS: $id_los, SUMA: $sum, KOM0: $kom(0), KOM1: $kom(1)"}
}

fiber yield; runda; wizualizacja
/// wydruk
---
ID: 0, ID_LOS: 179, SUMA: 179, KOM0: 709, KOM1: 856
ID: 1, ID_LOS: 856, SUMA: 856, KOM0: 179, KOM1: 684
ID: 2, ID_LOS: 684, SUMA: 684, KOM0: 856, KOM1: 659
ID: 3, ID_LOS: 659, SUMA: 659, KOM0: 684, KOM1: 709
ID: 4, ID_LOS: 709, SUMA: 709, KOM0: 659, KOM1: 179
---
ID: 0, ID_LOS: 179, SUMA: 1744, KOM0: 659, KOM1: 684
ID: 1, ID_LOS: 856, SUMA: 1719, KOM0: 709, KOM1: 659
ID: 2, ID_LOS: 684, SUMA: 2199, KOM0: 179, KOM1: 709
ID: 3, ID_LOS: 659, SUMA: 2052, KOM0: 856, KOM1: 179
ID: 4, ID_LOS: 709, SUMA: 1547, KOM0: 684, KOM1: 856
---
ID: 0, ID_LOS: 179, SUMA: 3087, KOM0: 684, KOM1: 659
ID: 1, ID_LOS: 856, SUMA: 3087, KOM0: 659, KOM1: 709
ID: 2, ID_LOS: 684, SUMA: 3087, KOM0: 709, KOM1: 179
ID: 3, ID_LOS: 659, SUMA: 3087, KOM0: 179, KOM1: 856
ID: 4, ID_LOS: 709, SUMA: 3087, KOM0: 856, KOM1: 684

Zadanie 8.2 -------------------------------------
#alg 2: działający w O(n) rundach.
source symul_lib.tcl

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}
 
fiber create $liczbaWierz {
	set sum $id_los
	wyslij 1 $id_los
	set i 0
	fiber yield; 
	while {$i < $liczbaWierz-1} { 
		set x $kom(0)
		let sum $sum+$x
		wyslij 1 $x
		incr i
		fiber yield;
  }
}
 
Inicjalizacja; 
 
proc wizualizacja {} {
	_puts ---
    fiber_iterate {_puts "ID: $id, ID_LOS: $id_los, SUMA: $sum, KOM0: $kom(0)"}
}

fiber yield; runda; wizualizacja
/// wydruk
---
ID: 0, ID_LOS: 213, SUMA: 213, KOM0: 945
ID: 1, ID_LOS: 679, SUMA: 679, KOM0: 213
ID: 2, ID_LOS: 418, SUMA: 418, KOM0: 679
ID: 3, ID_LOS: 996, SUMA: 996, KOM0: 418
ID: 4, ID_LOS: 945, SUMA: 945, KOM0: 996
---
ID: 0, ID_LOS: 213, SUMA: 1158, KOM0: 996
ID: 1, ID_LOS: 679, SUMA: 892, KOM0: 945
ID: 2, ID_LOS: 418, SUMA: 1097, KOM0: 213
ID: 3, ID_LOS: 996, SUMA: 1414, KOM0: 679
ID: 4, ID_LOS: 945, SUMA: 1941, KOM0: 418
---
ID: 0, ID_LOS: 213, SUMA: 2154, KOM0: 418
ID: 1, ID_LOS: 679, SUMA: 1837, KOM0: 996
ID: 2, ID_LOS: 418, SUMA: 1310, KOM0: 945
ID: 3, ID_LOS: 996, SUMA: 2093, KOM0: 213
ID: 4, ID_LOS: 945, SUMA: 2359, KOM0: 679
---
ID: 0, ID_LOS: 213, SUMA: 2572, KOM0: 679
ID: 1, ID_LOS: 679, SUMA: 2833, KOM0: 418
ID: 2, ID_LOS: 418, SUMA: 2255, KOM0: 996
ID: 3, ID_LOS: 996, SUMA: 2306, KOM0: 945
ID: 4, ID_LOS: 945, SUMA: 3038, KOM0: 213
---
ID: 0, ID_LOS: 213, SUMA: 3251, KOM0: 213
ID: 1, ID_LOS: 679, SUMA: 3251, KOM0: 679
ID: 2, ID_LOS: 418, SUMA: 3251, KOM0: 418
ID: 3, ID_LOS: 996, SUMA: 3251, KOM0: 996
ID: 4, ID_LOS: 945, SUMA: 3251, KOM0: 945


