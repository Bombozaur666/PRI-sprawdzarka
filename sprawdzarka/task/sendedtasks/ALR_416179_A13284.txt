<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://faculty.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="A">
<imie_nazwisko>Jan Szostakowski</imie_nazwisko>
<nr_indeksu>416179</nr_indeksu>
<liczba_pkt>5</liczba_pkt>
<z>-1</z>
<z>0</z>
<z>1</z>
<z>1a</z>
<z>8</z>
</sprawozdanie>


Zad. -1. --------------------


events03.tcl:

0: aaaaaaaaa

1: aaaaaaaaa

2: aaaaaaaaa

0: bbbbbbbbb

1: bbbbbbbbb

2: bbbbbbbbb


events03a.tcl:

#% 0 3 2 1

#% 0 2 3 1

#% 0 3 1 2

#% 0 2 1 3

#% 0 1 3 2

#% 0 1 2 3



Zad. 0. --------------------


0: ,

1: 0,

2: ,

3: ,

4: ,

0: ,

1: ,

2: 1,

3: ,

4: ,

0: ,

1: ,

2: ,

3: 2,

4: ,

0: ,

1: ,

2: ,

3: ,

4: 3,

0: 4,

1: ,

2: ,

3: ,

4: ,

0: ,

1: 5,

2: ,

3: ,

4: ,

0: ,

1: ,

2: 6,

3: ,

4: ,

0: ,

1: ,

2: ,

3: 7,

4: ,

0: ,

1: ,

2: ,

3: ,

4: 8,



Zad. 1. --------------------


load ./q3.dll
source symul_lib.tcl;

set towers 5
set neighbours(0) {4 1}
set neighbours(1) {0 2}
set neighbours(2) {1 3}
set neighbours(3) {2 4}
set neighbours(4) {3 0}

fiber create $towers {
	set leader ?;
	com0_send $id;
	fiber yield;

	while {$run}
	{
		if {$kom1!=""}
		{
			set x $com1;

			if {$leader == 1} {
			}
			elseif {$x = =0} {
				com0_send $x;
				set leader 0;
			}
			elseif {$x > $id} {
				com0_send $x;
			}
			elseif {$x == $id} {
				set leader 1;
				com0_send 0;
			}
			elseif {$x < $id} {
			}
		}
		fiber yield;
	}
}

Init;

proc visualization {} {
  fiber_iterate {_puts "$id: $leader, $com1"}
}

if 0 {
	set_run 0; fiber yield; runda; set_run 1; fiber delete
	set_run 0; fiber yield; runda; set_run 1; fiber restart
	fiber error
}

fiber yield; runda; visualization


Wynik:

0: ?, 1

1: ?, 2

2: ?, 3

3: ?, 4

4: ?, 0

0: ?, 2

1: ?, 3

2: ?, 4

3: ?, 0

4: 0, 1

0: ?, 3

1: ?, 4

2: ?, 0

3: 0,

4: 0, 2

0: ?, 4

1: ?, 0

2: 0,

3: 0,

4: 0, 3

0: ?, 0

1: 0,

2: 0,

3: 0,

4: 0, 4

0: 0,

1: 0,

2: 0,

3: 0, 0

4: 1, 0

0: 0,

1: 0,

2: 0, 0

3: 0,

4: 1,

0: 0,

1: 0, 0

2: 0,

3: 0,

4: 1,


Zad. 1a. --------------------


load ./q3.dll
source symul_lib.tcl;

set towers 5
set neighbours(0) {4 1}
set neighbours(1) {0 2}
set neighbours(2) {1 3}
set neighbours(3) {2 4}
set neighbours(4) {3 0}

fiber create $towers
{
	set leader ?;
	com0_send $id;
	com1_send $id;
	fiber yield;

	while {$run}
	{
		set x0 $com0;
		set x1 $com1;

		if {$com1!="" && $com0!=""}
		{
			set x ?;

			if {$com0 > $com1}
			{
				set x $com0;

				if {$leader==1} {
				}
				elseif {$x==0} {
					com1_send 0;
					set leader 0;
				}
				elseif {$x>$id} {
					com1_send $x;
				}
				elseif {$x==$id} {
					set leader 1;
					com0_send 0;
					com1_send 0;
				}
				elseif {$x < $id} {
				}

				fiber yield;
			}
			else {
				set x $com1;
				if {$leader==1} {
				}
				elseif {$x==0} {
					com0_send $x;
					set leader 0;
				}
				elseif {$x>$id} {
					com0_send $x;
				}
				elseif {$x==$id} {
					set leader 1;
					com0_send 0;
					com1_send 0;
				}
				elseif {$x < $id} {
				}

				fiber yield;
			}
		}
		elseif {$com0!=""} {
			set x $com0;
			if {$leader==1} {
			}
			elseif {$x==0} {
				com1_send 0;
				set leader 0;
			}
			elseif {$x>$id} {
				com1_send $x;
			}
			elseif {$x==$id} {
				set leader 1;
				com0_send 0;
				com1_send 0;
			}
			elseif {$x < $id} {
			}

			fiber yield;
		}
		else {
			set x $com1;
			if {$leader==1} {
			}
			elseif {$x==0} {
				com0_send $x;
				set leader 0;
			}
			elseif {$x>$id} {
				com0_send $x;
			}
			elseif {$x==$id} {
				set leader 1;
				com0_send 0;
				com1_send 0;
			}
			elseif {$x < $id} {
			}
			fiber yield;
		}
	}
}

Init;

proc visualization {} {
  fiber_iterate {_puts "$id: $leader, $com0, $com1"}
}

if 0 {
	set_run 0; fiber yield; runda; set_run 1; fiber delete
	set_run 0; fiber yield; runda; set_run 1; fiber restart
	fiber error
}

fiber yield; runda; visualization


Wynik:

0: ?, 4, 1

1: ?, 0, 2

2: ?, 1, 3

3: ?, 2, 4

4: ?, 3, 0

0: ?, , 2

1: ?, 4, 3

2: ?, , 4

3: ?, ,

4: ?, ,

0: ?, ,

1: ?, , 4

2: ?, 4,

3: ?, ,

4: ?, , 2

0: ?, , 4

1: ?, ,

2: ?, ,

3: ?, 4,

4: ?, ,

0: ?, ,

1: ?, ,

2: ?, ,

3: ?, ,

4: ?, 4, 4

0: ?, 0,

1: ?, ,

2: ?, ,

3: ?, , 0

4: 1, ,

0: 0, ,

1: ?, 0,

2: ?, , 0

3: 0, ,

4: 1, ,

0: 0, ,

1: 0, , 0

2: 0, 0,

3: 0, ,

4: 1, ,

0: 0, , 0

1: 0, ,

2: 0, ,

3: 0, 0,

4: 1, ,

0: 0, ,

1: 0, ,

2: 0, ,

3: 0, ,

4: 1, 0, 0

0: 0, ,

1: 0, ,

2: 0, ,

3: 0, ,

4: 1, ,

0: 0, ,

1: 0, ,

2: 0, ,

3: 0, ,

4: 1, ,

0: 0, ,

1: 0, ,

2: 0, ,

3: 0, ,

4: 1, ,


Zad. 8. --------------------


source symul_lib.tcl;
set towers 6
set neighbours(0) {5 1}
set neighbours(1) {0 2}
set neighbours(2) {1 3}
set neighbours(3) {2 4}
set neighbours(4) {3 5}
set neighbours(5) {4 0}

fiber create $towers
{
	set sum $id_los
	set count [expr $towers - 1]
	set score ""
	com1_send $sum
	fiber yield;
	while {$run}
	{
		if {$com0!="" && $score!="end"}
		{
			if {$count>0}
			{
				set k $com0
				set sum [expr $id_los + $k]
				set count [expr $count - 1]
				com1_send $suma
			}
			else
			{
				set score "end"
			}
		}
		fiber yield;
	}
}

Init;

proc visualization {} {
	fiber_iterate {_puts "$id: $id_los, sum: $sum, $count, $score"}
}

fiber yield; runda; visualization


Wynik:

0: 251, suma: 251, 5,

1: 866, suma: 866, 5,

2: 424, suma: 424, 5,

3: 432, suma: 432, 5,

4: 722, suma: 722, 5,

5: 917, suma: 917, 5,

0: 251, suma: 1168, 4,

1: 866, suma: 1117, 4,

2: 424, suma: 1290, 4,

3: 432, suma: 856, 4,

4: 722, suma: 1154, 4,

5: 917, suma: 1639, 4,

0: 251, suma: 1890, 3,

1: 866, suma: 2034, 3,

2: 424, suma: 1541, 3,

3: 432, suma: 1722, 3,

4: 722, suma: 1578, 3,

5: 917, suma: 2071, 3,

0: 251, suma: 2322, 2,

1: 866, suma: 2756, 2,

2: 424, suma: 2458, 2,

3: 432, suma: 1973, 2,

4: 722, suma: 2444, 2,

5: 917, suma: 2495, 2,

0: 251, suma: 2746, 1,

1: 866, suma: 3188, 1,

2: 424, suma: 3180, 1,

3: 432, suma: 2890, 1,

4: 722, suma: 2695, 1,

5: 917, suma: 3361, 1,

0: 251, suma: 3612, 0,

1: 866, suma: 3612, 0,

2: 424, suma: 3612, 0,

3: 432, suma: 3612, 0,

4: 722, suma: 3612, 0,

5: 917, suma: 3612, 0,

0: 251, suma: 3612, 0, end

1: 866, suma: 3612, 0, end

2: 424, suma: 3612, 0, end

3: 432, suma: 3612, 0, end

4: 722, suma: 3612, 0, end

5: 917, suma: 3612, 0, end
