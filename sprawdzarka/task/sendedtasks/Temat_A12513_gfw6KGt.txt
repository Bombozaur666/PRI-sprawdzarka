<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://mhanckow.vm.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="A">
<imie_nazwisko>Bartosz Gąsior</imie_nazwisko>
<nr_indeksu>407206</nr_indeksu>
<liczba_pkt>10</liczba_pkt>
<zadanie nr="-1" pkt="1"></zadanie>
<zadanie nr="0" pkt="1"></zadanie>
<zadanie nr="1" pkt="1"></zadanie>
<zadanie nr="1a" pkt="1"></zadanie>
<zadanie nr="8" pkt="1"></zadanie>
<zadanie nr="3" pkt="4"></zadanie>
<zadanie nr="9" pkt="1"></zadanie>
</sprawozdanie>

Zadanie -1 -------------------------------------
(identyczne jak ma stronie)
/// wydruk
0: aaaaaaaaa
1: aaaaaaaaa
2: aaaaaaaaa
0: bbbbbbbbb
1: bbbbbbbbb
2: bbbbbbbbb
0: aaaaaaaaa
1: aaaaaaaaa
2: aaaaaaaaa
0: bbbbbbbbb
1: bbbbbbbbb
2: bbbbbbbbb
///w konsoli
fiber error
  #% ended ended ended

(identyczne jak ma stronie)
/// wydruk
(brak)
///w konsoli
  #% 0 1 5 2 3 4
  #% 0 1 4 2 3 5
  #% 0 1 3 2 5 4
  #% 0 1 3 2 4 5
  #% 0 1 2 5 4 3
  #% 0 1 2 4 5 3
  #% 0 1 2 5 3 4
  #% 0 1 2 4 3 5
  #% 0 1 2 3 5 4
  #% 0 1 2 3 4 5
fiber error
  #% ended ended ended

Zadanie 0 -------------------------------------
(identyczne jak na stronie)
/// wydruk
0: , 
1: 0, 
2: , 
3: , 
4: , 
0: , 
1: , 
2: 1, 
3: , 
4: , 
0: , 
1: , 
2: , 
3: 2, 
4: , 
0: , 
1: , 
2: , 
3: , 
4: 3, 
0: 4, 
1: , 
2: , 
3: , 
4: , 
0: , 
1: 5, 
2: , 
3: , 
4: , 
0: , 
1: , 
2: 6, 
3: , 
4: , 

Zadanie 1 -------------------------------------
source symul_lib.tcl; # load simulator
 
# create graph

set liczbaWierz 5
set LW $liczbaWierz

iterate i $LW {
	let i1 $i-1; if {$i1==-1} {let i1 $LW-1}
	let i2 $i+1; if {$i2==$LW} {let i2 0}
	set sasiedzi($i) "$i1 $i2"
}
 
# generate and define fibers
fiber create $LW {
 
set leader "Undef"
wyslij 1 "N$id_los"

while {$run} { 
	set msg [czytaj 0]
	set type [string index $msg 0]
	set val [string range $msg 1 1000]
 	if {$type=="L"} {
		set leader "NoLeader"
		wyslij 1 "$type$val"
   		break
	}
	if {$val>$id_los} {
		wyslij 1 "$type$val"
	}
	if {$val==$id_los} {
		set leader "Leader"
		wyslij 1 "L$id_los"
		break
	}
	fiber yield;
  }
}
 
Inicjalizacja; # set neighbours and things

#show states of each fiber in output

proc wizualizacja {} {
	fiber_iterate {_puts "$id, $id_los: $kom0, $leader"}
}

fiber yield; runda; wizualizacja
/// wydruk
0, 747: N147, Undef
1, 1000: N747, Undef
2, 619: N1000, Undef
3, 96: N619, Undef
4, 147: N96, Undef
0, 747: , Undef
1, 1000: , Undef
2, 619: , Undef
3, 96: N1000, Undef
4, 147: N619, Undef
0, 747: N619, Undef
1, 1000: , Undef
2, 619: , Undef
3, 96: , Undef
4, 147: N1000, Undef
0, 747: N1000, Undef
1, 1000: , Undef
2, 619: , Undef
3, 96: , Undef
4, 147: , Undef
0, 747: , Undef
1, 1000: N1000, Undef
2, 619: , Undef
3, 96: , Undef
4, 147: , Undef
0, 747: , Undef
1, 1000: , Leader
2, 619: L1000, Undef
3, 96: , Undef
4, 147: , Undef
0, 747: , Undef
1, 1000: , Leader
2, 619: , NoLeader
3, 96: L1000, Undef
4, 147: , Undef
0, 747: , Undef
1, 1000: , Leader
2, 619: , NoLeader
3, 96: , NoLeader
4, 147: L1000, Undef
0, 747: L1000, Undef
1, 1000: , Leader
2, 619: , NoLeader
3, 96: , NoLeader
4, 147: , NoLeader
0, 747: , NoLeader
1, 1000: L1000, Leader
2, 619: , NoLeader
3, 96: , NoLeader
4, 147: , NoLeader
0, 747: , NoLeader
1, 1000: , Leader
2, 619: , NoLeader
3, 96: , NoLeader
4, 147: , NoLeader

Zadanie 1a -------------------------------------
source symul_lib.tcl; # load simulator
 
# create graph

set liczbaWierz 6
set LW $liczbaWierz

iterate i $LW {
	let i1 $i-1; if {$i1==-1} {let i1 $LW-1}
	let i2 $i+1; if {$i2==$LW} {let i2 0}
	if {int(rand()*20)%2==0} {
		set sasiedzi($i) "$i1 $i2"
	} else {
		set sasiedzi($i) "$i2 $i1"
	}
}
 
# generate and define fibers
fiber create $LW {
 
set leader "Undef"
wyslij 1 "N$id_los"

while {$run} { 
	iterate j 2 {
		set msg [czytaj $j]
		set type [string index $msg 0]
		set val [string range $msg 1 1000]
		let port !$j
 		if {$type=="L"} {
			set leader "NoLeader"
			wyslij $port "$type$val"
   			continue
		}
		if {$val>$id_los} {
			wyslij $port "$type$val"
		}
		if {$val==$id_los} {
			set leader "Leader"
			wyslij $port "L$id_los"
			continue
		}
	}
	fiber yield;
  }
}
 
Inicjalizacja; # set neighbours and things

#show states of each fiber in output

proc wizualizacja {} {
	fiber_iterate {_puts "$id, $id_los: $kom0, $kom1, $leader"}
}

fiber yield; runda; wizualizacja

/// wydruk
0, 433: N558, N567, Undef
1, 558: N134, , Undef
2, 134: , , Undef
3, 572: , , Undef
4, 125: N572, , Undef
5, 567: N125, N433, Undef
0, 433: , , Undef
1, 558: , N567, Undef
2, 134: , , Undef
3, 572: , , Undef
4, 125: , , Undef
5, 567: N572, N558, Undef
0, 433: , N572, Undef
1, 558: , , Undef
2, 134: , N567, Undef
3, 572: , , Undef
4, 125: , , Undef
5, 567: , , Undef
0, 433: , , Undef
1, 558: , N572, Undef
2, 134: , , Undef
3, 572: N567, , Undef
4, 125: , , Undef
5, 567: , , Undef
0, 433: , , Undef
1, 558: , , Undef
2, 134: , N572, Undef
3, 572: , , Undef
4, 125: , , Undef
5, 567: , , Undef
0, 433: , , Undef
1, 558: , , Undef
2, 134: , , Undef
3, 572: N572, , Undef
4, 125: , , Undef
5, 567: , , Undef
0, 433: , , Undef
1, 558: , , Undef
2, 134: , , Undef
3, 572: , , Leader
4, 125: L572, , Undef
5, 567: , , Undef
0, 433: , , Undef
1, 558: , , Undef
2, 134: , , Undef
3, 572: , , Leader
4, 125: , , NoLeader
5, 567: L572, , Undef
0, 433: , L572, Undef
1, 558: , , Undef
2, 134: , , Undef
3, 572: , , Leader
4, 125: , , NoLeader
5, 567: , , NoLeader
0, 433: , , NoLeader
1, 558: , L572, Undef
2, 134: , , Undef
3, 572: , , Leader
4, 125: , , NoLeader
5, 567: , , NoLeader
0, 433: , , NoLeader
1, 558: , , NoLeader
2, 134: , L572, Undef
3, 572: , , Leader
4, 125: , , NoLeader
5, 567: , , NoLeader
0, 433: , , NoLeader
1, 558: , , NoLeader
2, 134: , , NoLeader
3, 572: L572, , Leader
4, 125: , , NoLeader
5, 567: , , NoLeader

Zadanie 8 -------------------------------------
Dla komunikatów:
source symul_lib.tcl; # load simulator
 
#set parameters
 
set liczbaWierz 5

set LW $liczbaWierz

# create graph

iterate i $LW {
	let i1 $i-1; if {$i1==-1} {let i1 $LW-1}
	let i2 $i+1; if {$i2==$LW} {let i2 0}
	set sasiedzi($i) "$i1 $i2"
}

fiber create $LW {
	set suma 0
	if {$id==0} {set leader 1}
	if {$id!=0} {set leader 0}
	if {$leader} {wyslij 1 $id_los}
	while {$run} {
		fiber yield;
		set val [czytaj 0]
		if {$val != ""} {
			if {$leader} {
				set suma $val
				wyslij 1 $val
				break
			}
			let val $val+$id_los
			wyslij 1 $val
			break
		}	
	}
	
	while {$run} {	
		fiber yield;
		set val [czytaj 0]
		if {$val != ""} {
			if {$leader} {
				break
			} else {
				set suma $val
				wyslij 1 $val
				break
			}
		}
	}
}
Inicjalizacja;

proc wizualizacja {} {
	fiber_iterate {_puts "$id, $id_los: $kom0, $kom1, $leader, $suma"}
}
  #% 

fiber yield; runda; wizualizacja

/// wydruk

0, 162: , , 1, 0
1, 64: 162, , 0, 0
2, 530: , , 0, 0
3, 476: , , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 0
1, 64: , , 0, 0
2, 530: 226, , 0, 0
3, 476: , , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 0
1, 64: , , 0, 0
2, 530: , , 0, 0
3, 476: 756, , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 0
1, 64: , , 0, 0
2, 530: , , 0, 0
3, 476: , , 0, 0
4, 432: 1232, , 0, 0
0, 162: 1664, , 1, 0
1, 64: , , 0, 0
2, 530: , , 0, 0
3, 476: , , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 1664
1, 64: 1664, , 0, 0
2, 530: , , 0, 0
3, 476: , , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 1664
1, 64: , , 0, 1664
2, 530: 1664, , 0, 0
3, 476: , , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 1664
1, 64: , , 0, 1664
2, 530: , , 0, 1664
3, 476: 1664, , 0, 0
4, 432: , , 0, 0
0, 162: , , 1, 1664
1, 64: , , 0, 1664
2, 530: , , 0, 1664
3, 476: , , 0, 1664
4, 432: 1664, , 0, 0
0, 162: 1664, , 1, 1664
1, 64: , , 0, 1664
2, 530: , , 0, 1664
3, 476: , , 0, 1664
4, 432: , , 0, 1664
0, 162: , , 1, 1664
1, 64: , , 0, 1664
2, 530: , , 0, 1664
3, 476: , , 0, 1664
4, 432: , , 0, 1664
0, 162: , , 1, 1664
1, 64: , , 0, 1664
2, 530: , , 0, 1664
3, 476: , , 0, 1664
4, 432: , , 0, 1664

//////

Dla rund:

source symul_lib.tcl; # load simulator
 
#set parameters
 
set liczbaWierz 5

set LW $liczbaWierz

# create graph

iterate i $LW {
	let i1 $i-1; if {$i1==-1} {let i1 $LW-1}
	let i2 $i+1; if {$i2==$LW} {let i2 0}
	set sasiedzi($i) "$i1 $i2"
}

fiber create $LW {
	set suma $id_los
	wyslij 1 $id_los
	while {$run} {
		fiber yield;
		set val [czytaj 0]
		if {$val!= ""} {
			if {$val==$id_los} {break}
			let suma $suma+$val
			wyslij 1 $val
		}
	}
}
Inicjalizacja;

proc wizualizacja {} {
	fiber_iterate {_puts "$id, $id_los: $kom0, $kom1, $suma"}
}
  #% 

fiber yield; runda; wizualizacja

///wydruki

0, 30: 462, , 30
1, 591: 30, , 591
2, 118: 591, , 118
3, 434: 118, , 434
4, 462: 434, , 462
0, 30: 434, , 492
1, 591: 462, , 621
2, 118: 30, , 709
3, 434: 591, , 552
4, 462: 118, , 896
0, 30: 118, , 926
1, 591: 434, , 1083
2, 118: 462, , 739
3, 434: 30, , 1143
4, 462: 591, , 1014
0, 30: 591, , 1044
1, 591: 118, , 1517
2, 118: 434, , 1201
3, 434: 462, , 1173
4, 462: 30, , 1605
0, 30: 30, , 1635
1, 591: 591, , 1635
2, 118: 118, , 1635
3, 434: 434, , 1635
4, 462: 462, , 1635

Zadanie 3 -------------------------------------
source symul_lib.tcl; # load simulator
 
# create graph

set liczbaWierz 6
set LW $liczbaWierz

iterate i $LW {
	let i1 $i-1; if {$i1==-1} {let i1 $LW-1}
	let i2 $i+1; if {$i2==$LW} {let i2 0}
	if {int(rand()*20)%2==0} {
		set sasiedzi($i) "$i1 $i2"
	} else {
		set sasiedzi($i) "$i2 $i1"
	}
}
 
# generate and define fibers
fiber create $LW {
 
set leader "Undef"
wyslij 1 "N$id_los"

while {$run} { 
	iterate j 2 {
		set msg [czytaj $j]
		set type [string index $msg 0]
		set val [string range $msg 1 1000]
		let port !$j
 		if {$type=="L"} {
			set leader "NoLeader"
			wyslij $port "$type$val"
   			continue
		}
		if {$val>$id_los} {
			wyslij $port "$type$val"
		}
		if {$val==$id_los} {
			set leader "Leader"
			wyslij $port "L$id_los"
			continue
		}
	}
	fiber yield;
  }
}
 
Inicjalizacja; # set neighbours and things

#show states of each fiber in output

proc wizualizacja {} {
	fiber_iterate {_puts "$id, $id_los: $kom0, $kom1, $leader"}
}

fiber yield; runda; wizualizacja
/// wydruk
0, 617: , , Undef
1, 53: , N301, Undef
2, 301: , N53, Undef
3, 346: , N840, Undef
4, 840: N144, N346, Undef
5, 144: N617, , Undef
0, 617: N301, , Undef
1, 53: , , Undef
2, 301: N840, , Undef
3, 346: , , Undef
4, 840: N617, , Undef
5, 144: , , Undef
0, 617: , , Undef
1, 53: , N840, Undef
2, 301: , , Undef
3, 346: , , Undef
4, 840: , , Undef
5, 144: , , Undef
0, 617: N840, , Undef
1, 53: , , Undef
2, 301: , , Undef
3, 346: , , Undef
4, 840: , , Undef
5, 144: , , Undef
0, 617: , , Undef
1, 53: , , Undef
2, 301: , , Undef
3, 346: , , Undef
4, 840: , , Undef
5, 144: N840, , Undef
0, 617: , , Undef
1, 53: , , Undef
2, 301: , , Undef
3, 346: , , Undef
4, 840: N840, , Undef
5, 144: , , Undef
0, 617: , , Undef
1, 53: , , Undef
2, 301: , , Undef
3, 346: , L840, Undef
4, 840: , , Leader
5, 144: , , Undef
0, 617: , , Undef
1, 53: , , Undef
2, 301: L840, , Undef
3, 346: , , NoLeader
4, 840: , , Leader
5, 144: , , Undef
0, 617: , , Undef
1, 53: , L840, Undef
2, 301: , , NoLeader
3, 346: , , NoLeader
4, 840: , , Leader
5, 144: , , Undef
0, 617: L840, , Undef
1, 53: , , NoLeader
2, 301: , , NoLeader
3, 346: , , NoLeader
4, 840: , , Leader
5, 144: , , Undef
0, 617: , , NoLeader
1, 53: , , NoLeader
2, 301: , , NoLeader
3, 346: , , NoLeader
4, 840: , , Leader
5, 144: L840, , Undef
0, 617: , , NoLeader
1, 53: , , NoLeader
2, 301: , , NoLeader
3, 346: , , NoLeader
4, 840: L840, , Leader
5, 144: , , NoLeader
0, 617: , , NoLeader
1, 53: , , NoLeader
2, 301: , , NoLeader
3, 346: , L840, NoLeader
4, 840: , , NoLeader
5, 144: , , NoLeader

Zadanie 9 -------------------------------------

Algorytm wyboru leadera ma dolne oszacowanie n/2 rund

///uzasadnienie

By wierzchołek mógł być pewnym tego że jest leaderem,
musi w jakiś sposób poznać ID każdego z wierzchołków ringu.
A w skrajnych przypadkach (tj, w przypadku przeciwległych wierzchołków ringu)
czas przekazania ID między wierzchołkami nie może być niższy niż połowa długości
ringu.

