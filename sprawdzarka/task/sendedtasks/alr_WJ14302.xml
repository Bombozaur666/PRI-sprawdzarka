<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://faculty.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="A">
<imie_nazwisko>Wojciech Jarzębiński</imie_nazwisko>
<nr_indeksu>416082</nr_indeksu>
<liczba_pkt>2.5</liczba_pkt>
<zadanie nr="-1" pkt="1"></zadanie>
<zadanie nr="0" pkt="1"></zadanie>
<zadanie nr="1" pkt="1"></zadanie>
<zadanie nr="1a" pkt="1"></zadanie>
<zadanie nr="5" pkt="4"></zadanie>
<zadanie nr="8" pkt="1"></zadanie>
</sprawozdanie>

Zadanie -1 -------------------------------------


source symul_lib.tcl;
  #%

fiber create 3 start
  #% 
  # + tworzy 3 fibery: fiber0 fiber1 fiber2,
  #  ktore rownoczesnie sa interp-ami (logicznymi)
  # + fibery wykonuja podany w 3 arg. kod tcl-owy,
  #  w tym wypadku jest to wywolanie proc start

proc Inicjalizacja nr {
  fiber$nr alias _puts _puts
  fiber$nr alias maineval eval
  fiber$nr eval "set nr $nr; set run 1"
  fiber$nr eval {
    proc start {} {
      global nr
      _puts "$nr: aaaaaaaaa"
      fiber yield
      _puts "$nr: bbbbbbbbb"
    }
  }
}
  #% 
  #% 
Inicjalizacja 0
  #% 
Inicjalizacja 1
Inicjalizacja 2
  #% 
  #% 

fiber yield
  #% 
  #% 
  #% 
  #% 
  # + przalaczenie procesora na fiber0 ...

fiber error
  #% ended ended ended
  #% {} {} {}
  # + wyswietla stan fiberow
fiber restart
  #% 
  # + restartuje te wstanie "ended"
fiber delete
  # + usuwa fibery (wszystkie musza byc "ended")



exit


fiber switchto 0; set zm
  #% 0 1 2 3 4 5 7 6 9 8
  #% 0 1 2 3 4 5 7 6 8 9
  #% 0 1 2 3 4 5 6 9 8 7
  #% 0 1 2 3 4 5 6 8 9 7
  #% 0 1 2 3 4 5 6 9 7 8
  #% 0 1 2 3 4 5 6 8 7 9
  #% 0 1 2 3 4 5 6 7 9 8
  #% 0 1 2 3 4 5 6 7 8 9
  #% 0 3 2 1
  #% 1 0 2 3
  #% 0 3 2 1
  #% 0 2 3 1
  #% 0 3 1 2
  #% 0 2 1 3
  #% 0 1 3 2
  #% 0 1 2 3
  #% 0 2 1 3
  #% 0 1 3 2
  #% 0 1 2 3
  # + odczytujemy kolejne permutacje...




Zadanie 0 -------------------------------------

3: , 
4: , 
0: , 
1: , 
2: , 
3: 2, 
4: , 
0: , 
1: , 
2: , 
3: , 
4: 3, 
0: 4, 
1: , 
2: , 
3: , 
4: , 
0: , 
1: 5, 

Zadanie 1 -------------------------------------

fiber create $liczbaWierz {
    set lider {}
    wyslij 1 "$id_los"
    fiber yield;

    while {$run} {
      set id0 $kom(0)

      if {$id0>$id_los} {
        wyslij 1 "$id0"
      } elseif {$id0==$id_los} {
        set lider "TRUE"; wyslij 1 "-1"
      } elseif {$id0==-1 && $lider=={}} {
        set lider "FALSE"; wyslij 1 "-1"
      }
      fiber yield;
    }
}

output:

**********************************
lider:  ID: 0, ID_los: 474; komunikat: 252, 
lider:  ID: 1, ID_los: 510; komunikat: 474, 
lider:  ID: 2, ID_los: 455; komunikat: 510, 
lider:  ID: 3, ID_los: 867; komunikat: 455, 
lider:  ID: 4, ID_los: 252; komunikat: 867, 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: 867, 
lider:  ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider:  ID: 3, ID_los: 867; komunikat: 510, 
lider:  ID: 4, ID_los: 252; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: , 
lider:  ID: 1, ID_los: 510; komunikat: 867, 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider:  ID: 3, ID_los: 867; komunikat: , 
lider:  ID: 4, ID_los: 252; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: , 
lider:  ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: 867, 
lider:  ID: 3, ID_los: 867; komunikat: , 
lider:  ID: 4, ID_los: 252; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: , 
lider:  ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider:  ID: 3, ID_los: 867; komunikat: 867, 
lider:  ID: 4, ID_los: 252; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: , 
lider:  ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider: TRUE ID: 3, ID_los: 867; komunikat: , 
lider:  ID: 4, ID_los: 252; komunikat: -1, 
**********************************
lider:  ID: 0, ID_los: 474; komunikat: -1, 
lider:  ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider: TRUE ID: 3, ID_los: 867; komunikat: , 
lider: FALSE ID: 4, ID_los: 252; komunikat: , 
**********************************
lider: FALSE ID: 0, ID_los: 474; komunikat: , 
lider:  ID: 1, ID_los: 510; komunikat: -1, 
lider:  ID: 2, ID_los: 455; komunikat: , 
lider: TRUE ID: 3, ID_los: 867; komunikat: , 
lider: FALSE ID: 4, ID_los: 252; komunikat: , 
**********************************
lider: FALSE ID: 0, ID_los: 474; komunikat: , 
lider: FALSE ID: 1, ID_los: 510; komunikat: , 
lider:  ID: 2, ID_los: 455; komunikat: -1, 
lider: TRUE ID: 3, ID_los: 867; komunikat: , 
lider: FALSE ID: 4, ID_los: 252; komunikat: , 
**********************************
lider: FALSE ID: 0, ID_los: 474; komunikat: , 
lider: FALSE ID: 1, ID_los: 510; komunikat: , 
lider: FALSE ID: 2, ID_los: 455; komunikat: , 
lider: TRUE ID: 3, ID_los: 867; komunikat: -1, 
lider: FALSE ID: 4, ID_los: 252; komunikat: , 

Zadanie 1a -------------------------------------

source symul_lib.tcl; 

set liczbaWierz 5
set sasiedzi(0) {1 4}
set sasiedzi(1) {2 0}
set sasiedzi(2) {3 1}
set sasiedzi(3) {4 2}
set sasiedzi(4) {0 3}

fiber create $liczbaWierz {
    set lider {}
    wyslij 1 "$id_los"
    fiber yield;

    while {$run} {
      set id0 $kom(0)

      if {$id0>$id_los} {
        wyslij 1 "$id0"
      } elseif {$id0==$id_los} {
        set lider "TRUE"; wyslij 1 "-1"
      } elseif {$id0==-1 && $lider=={}} {
        set lider "FALSE"; wyslij 1 "-1"
      }
      fiber yield;
    }
}

**********************************
lider:  ID: 0, ID_los: 394; komunikat: 524, 
lider:  ID: 1, ID_los: 524; komunikat: 454, 
lider:  ID: 2, ID_los: 454; komunikat: 173, 
lider:  ID: 3, ID_los: 173; komunikat: 621, 
lider:  ID: 4, ID_los: 621; komunikat: 394, 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: , 
lider:  ID: 2, ID_los: 454; komunikat: 621, 
lider:  ID: 3, ID_los: 173; komunikat: , 
lider:  ID: 4, ID_los: 621; komunikat: 524, 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: 621, 
lider:  ID: 2, ID_los: 454; komunikat: , 
lider:  ID: 3, ID_los: 173; komunikat: , 
lider:  ID: 4, ID_los: 621; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: 621, 
lider:  ID: 1, ID_los: 524; komunikat: , 
lider:  ID: 2, ID_los: 454; komunikat: , 
lider:  ID: 3, ID_los: 173; komunikat: , 
lider:  ID: 4, ID_los: 621; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: , 
lider:  ID: 2, ID_los: 454; komunikat: , 
lider:  ID: 3, ID_los: 173; komunikat: , 
lider:  ID: 4, ID_los: 621; komunikat: 621, 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: , 
lider:  ID: 2, ID_los: 454; komunikat: , 
lider:  ID: 3, ID_los: 173; komunikat: -1, 
lider: TRUE ID: 4, ID_los: 621; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: , 
lider:  ID: 2, ID_los: 454; komunikat: -1, 
lider: FALSE ID: 3, ID_los: 173; komunikat: , 
lider: TRUE ID: 4, ID_los: 621; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: , 
lider:  ID: 1, ID_los: 524; komunikat: -1, 
lider: FALSE ID: 2, ID_los: 454; komunikat: , 
lider: FALSE ID: 3, ID_los: 173; komunikat: , 
lider: TRUE ID: 4, ID_los: 621; komunikat: , 
**********************************
lider:  ID: 0, ID_los: 394; komunikat: -1, 
lider: FALSE ID: 1, ID_los: 524; komunikat: , 
lider: FALSE ID: 2, ID_los: 454; komunikat: , 
lider: FALSE ID: 3, ID_los: 173; komunikat: , 
lider: TRUE ID: 4, ID_los: 621; komunikat: , 
**********************************
lider: FALSE ID: 0, ID_los: 394; komunikat: , 
lider: FALSE ID: 1, ID_los: 524; komunikat: , 
lider: FALSE ID: 2, ID_los: 454; komunikat: , 
lider: FALSE ID: 3, ID_los: 173; komunikat: , 
lider: TRUE ID: 4, ID_los: 621; komunikat: -1, 
**********************************
lider: FALSE ID: 0, ID_los: 394; komunikat: , 
lider: FALSE ID: 1, ID_los: 524; komunikat: , 
lider: FALSE ID: 2, ID_los: 454; komunikat: , 
lider: FALSE ID: 3, ID_los: 173; komunikat: , 
lider: TRUE ID: 4, ID_los: 621; komunikat: , 


Zadanie 3 -------------------------------------


source symul_lib.tcl
source symul_graf_lib.tcl

set liczbaWierz 10
iterate i $liczbaWierz {
  let i1 $i-1; if {$i1==-1} {let i1 $liczbaWierz-1}
  let i2 $i+1; if {$i2==$liczbaWierz} {let i2 0}
  set sasiedzi($i) "$i1 $i2"
}

proc reverse li {
  set len [llength $li]
  iterate i $len {lappend wynik [lindex $li [expr {$len-$i-1}]]}
  set wynik
}

fiber create $liczbaWierz {
  set lider {}
  
  wyslij 0 "$id_los 0 0"
  wyslij 1 "$id_los 0 0"
  fiber yield
  while {$run} {
    algorytm [czytaj 0] [czytaj 1]
    fiber yield
  }
}

Inicjalizacja

proc wizualizacja {} {
  _puts **********************************
  fiber_iterate {_puts "$id, $id_los, $lider; $kom0, $kom1"}
}

fiber_iterate {
  # + ta procedura jedynie przekazuje komunikaty...
  proc algorytm {m0 m1} {
    global id id_los stopien lider
    if {$m0!=""} {
      foreach {id0 i0 l0} $m0 break
      incr i0
      wyslij 1 "$id0 $i0 0"
	  if {$id_los<$id0} {
		set lider "false"
	   } 
	   if {$id_los>$id0 && $lider!="false"} {
		set lider "true"
	   }
    }
    if {$m1!=""} {
      foreach {id1 i1 l1} $m1 break
      incr i1
      wyslij 0 "$id1 $i1 0"
	  if {$id_los<$id1} {
		set lider "false"
	  } 
	   if {$id_los>$id1 && $lider!="false"} {
		set lider "true"
	   }
    }
  }
}

fiber yield; runda; wizualizacja; set licznikKom

output:

**********************************
0, 136, ; {527 0 0}, {271 0 0}
1, 271, ; {136 0 0}, {557 0 0}
2, 557, ; {271 0 0}, {56 0 0}
3, 56, ; {557 0 0}, {78 0 0}
4, 78, ; {56 0 0}, {887 0 0}
5, 887, ; {78 0 0}, {550 0 0}
6, 550, ; {887 0 0}, {948 0 0}
7, 948, ; {550 0 0}, {786 0 0}
8, 786, ; {948 0 0}, {527 0 0}
9, 527, ; {786 0 0}, {136 0 0}
**********************************
0, 136, false; {786 1 0}, {557 1 0}
1, 271, false; {527 1 0}, {56 1 0}
2, 557, true; {136 1 0}, {78 1 0}
3, 56, false; {271 1 0}, {887 1 0}
4, 78, false; {557 1 0}, {550 1 0}
5, 887, true; {56 1 0}, {948 1 0}
6, 550, false; {78 1 0}, {786 1 0}
7, 948, true; {887 1 0}, {527 1 0}
8, 786, false; {550 1 0}, {136 1 0}
9, 527, false; {948 1 0}, {271 1 0}
**********************************
0, 136, false; {948 2 0}, {56 2 0}
1, 271, false; {786 2 0}, {78 2 0}
2, 557, true; {527 2 0}, {887 2 0}
3, 56, false; {136 2 0}, {550 2 0}
4, 78, false; {271 2 0}, {948 2 0}
5, 887, false; {557 2 0}, {786 2 0}
6, 550, false; {56 2 0}, {527 2 0}
7, 948, true; {78 2 0}, {136 2 0}
8, 786, false; {887 2 0}, {271 2 0}
9, 527, false; {550 2 0}, {557 2 0}
**********************************
0, 136, false; {550 3 0}, {78 3 0}
1, 271, false; {948 3 0}, {887 3 0}
2, 557, false; {786 3 0}, {550 3 0}
3, 56, false; {527 3 0}, {948 3 0}
4, 78, false; {136 3 0}, {786 3 0}
5, 887, false; {271 3 0}, {527 3 0}
6, 550, false; {557 3 0}, {136 3 0}
7, 948, true; {56 3 0}, {271 3 0}
8, 786, false; {78 3 0}, {557 3 0}
9, 527, false; {887 3 0}, {56 3 0}
**********************************
0, 136, false; {887 4 0}, {887 4 0}
1, 271, false; {550 4 0}, {550 4 0}
2, 557, false; {948 4 0}, {948 4 0}
3, 56, false; {786 4 0}, {786 4 0}
4, 78, false; {527 4 0}, {527 4 0}
5, 887, false; {136 4 0}, {136 4 0}
6, 550, false; {271 4 0}, {271 4 0}
7, 948, true; {557 4 0}, {557 4 0}
8, 786, false; {56 4 0}, {56 4 0}
9, 527, false; {78 4 0}, {78 4 0}
**********************************
0, 136, false; {78 5 0}, {550 5 0}
1, 271, false; {887 5 0}, {948 5 0}
2, 557, false; {550 5 0}, {786 5 0}
3, 56, false; {948 5 0}, {527 5 0}
4, 78, false; {786 5 0}, {136 5 0}
5, 887, false; {527 5 0}, {271 5 0}
6, 550, false; {136 5 0}, {557 5 0}
7, 948, true; {271 5 0}, {56 5 0}
8, 786, false; {557 5 0}, {78 5 0}
9, 527, false; {56 5 0}, {887 5 0}
**********************************
0, 136, false; {56 6 0}, {948 6 0}
1, 271, false; {78 6 0}, {786 6 0}
2, 557, false; {887 6 0}, {527 6 0}
3, 56, false; {550 6 0}, {136 6 0}
4, 78, false; {948 6 0}, {271 6 0}
5, 887, false; {786 6 0}, {557 6 0}
6, 550, false; {527 6 0}, {56 6 0}
7, 948, true; {136 6 0}, {78 6 0}
8, 786, false; {271 6 0}, {887 6 0}
9, 527, false; {557 6 0}, {550 6 0}
**********************************
0, 136, false; {557 7 0}, {786 7 0}
1, 271, false; {56 7 0}, {527 7 0}
2, 557, false; {78 7 0}, {136 7 0}
3, 56, false; {887 7 0}, {271 7 0}
4, 78, false; {550 7 0}, {557 7 0}
5, 887, false; {948 7 0}, {56 7 0}
6, 550, false; {786 7 0}, {78 7 0}
7, 948, true; {527 7 0}, {887 7 0}
8, 786, false; {136 7 0}, {550 7 0}
9, 527, false; {271 7 0}, {948 7 0}
**********************************
0, 136, false; {271 8 0}, {527 8 0}
1, 271, false; {557 8 0}, {136 8 0}
2, 557, false; {56 8 0}, {271 8 0}
3, 56, false; {78 8 0}, {557 8 0}
4, 78, false; {887 8 0}, {56 8 0}
5, 887, false; {550 8 0}, {78 8 0}
6, 550, false; {948 8 0}, {887 8 0}
7, 948, true; {786 8 0}, {550 8 0}
8, 786, false; {527 8 0}, {948 8 0}
9, 527, false; {136 8 0}, {786 8 0}

9, 527, false; {786 10 0}, {136 10 0}

Zadanie 5 -------------------------------------

Dzielimy cykl na drzewa ukorzenione - rozwiązujemy kolorowanie grafów poprzez 

Zadanie 8 -------------------------------------

1)
source symul_lib.tcl

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}
 
fiber create $liczbaWierz {
	set sum $id
	wyslij 0 $id
	wyslij 1 $id
	set i 0
	fiber yield;
	while {$i < $liczbaWierz/2} { 
		set x $kom(0)
		set y $kom(1)
		let sum $sum+$x+$y
		wyslij 0 $y
		wyslij 1 $x
		incr i
		fiber yield;
  }
}
 
Inicjalizacja; 
 
proc wizualizacja {} {
	_puts **********************************
    fiber_iterate {_puts "ID: $id, SUMA: $sum, KOM0: $kom(0), KOM1: $kom(1)"}
}

fiber yield; runda; wizualizacja

output:

**********************************
ID: 0, SUMA: 0, KOM0: 4, KOM1: 1
ID: 1, SUMA: 1, KOM0: 0, KOM1: 2
ID: 2, SUMA: 2, KOM0: 1, KOM1: 3
ID: 3, SUMA: 3, KOM0: 2, KOM1: 4
ID: 4, SUMA: 4, KOM0: 3, KOM1: 0
**********************************
ID: 0, SUMA: 5, KOM0: 3, KOM1: 2
ID: 1, SUMA: 3, KOM0: 4, KOM1: 3
ID: 2, SUMA: 6, KOM0: 0, KOM1: 4
ID: 3, SUMA: 9, KOM0: 1, KOM1: 0
ID: 4, SUMA: 7, KOM0: 2, KOM1: 1
**********************************
ID: 0, SUMA: 10, KOM0: 2, KOM1: 3
ID: 1, SUMA: 10, KOM0: 3, KOM1: 4
ID: 2, SUMA: 10, KOM0: 4, KOM1: 0
ID: 3, SUMA: 10, KOM0: 0, KOM1: 1
ID: 4, SUMA: 10, KOM0: 1, KOM1: 2


2)
source symul_lib.tcl

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}
 
fiber create $liczbaWierz {
	set sum $id
	wyslij 1 $id
	set i 0
	fiber yield; 
	while {$i < $liczbaWierz-1} { 
		set x $kom(0)
		let sum $sum+$x
		wyslij 1 $x
		incr i
		fiber yield;
  }
}
 
Inicjalizacja; 
 
proc wizualizacja {} {
	_puts **********************************
    fiber_iterate {_puts "ID: $id, SUMA: $sum, KOM0: $kom(0), KOM1: $kom(1)"}
}

fiber yield; runda; wizualizacja

outpu:

**********************************
ID: 0, SUMA: 0, KOM0: 4, KOM1: 
ID: 1, SUMA: 1, KOM0: 0, KOM1: 
ID: 2, SUMA: 2, KOM0: 1, KOM1: 
ID: 3, SUMA: 3, KOM0: 2, KOM1: 
ID: 4, SUMA: 4, KOM0: 3, KOM1: 
**********************************
ID: 0, SUMA: 4, KOM0: 3, KOM1: 
ID: 1, SUMA: 1, KOM0: 4, KOM1: 
ID: 2, SUMA: 3, KOM0: 0, KOM1: 
ID: 3, SUMA: 5, KOM0: 1, KOM1: 
ID: 4, SUMA: 7, KOM0: 2, KOM1: 
**********************************
ID: 0, SUMA: 7, KOM0: 2, KOM1: 
ID: 1, SUMA: 5, KOM0: 3, KOM1: 
ID: 2, SUMA: 3, KOM0: 4, KOM1: 
ID: 3, SUMA: 6, KOM0: 0, KOM1: 
ID: 4, SUMA: 9, KOM0: 1, KOM1: 
**********************************
ID: 0, SUMA: 9, KOM0: 1, KOM1: 
ID: 1, SUMA: 8, KOM0: 2, KOM1: 
ID: 2, SUMA: 7, KOM0: 3, KOM1: 
ID: 3, SUMA: 6, KOM0: 4, KOM1: 
ID: 4, SUMA: 10, KOM0: 0, KOM1: 
**********************************
ID: 0, SUMA: 10, KOM0: 0, KOM1: 
ID: 1, SUMA: 10, KOM0: 1, KOM1: 
ID: 2, SUMA: 10, KOM0: 2, KOM1: 
ID: 3, SUMA: 10, KOM0: 3, KOM1: 
ID: 4, SUMA: 10, KOM0: 4, KOM1: 
